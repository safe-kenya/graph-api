type Query {
  hello: String

  admins: [admin]
  admin: admin

  students: [student]
  student: student

  parents: [parent]
  parent: parent

  drivers: [driver]
  driver: driver

  buses: [bus]
  bus: bus

  trips: [trip]
  trip: trip

  routes: [route]
  route: route

  schedules: [schedule]
  schedule: schedule

  events: [event]
  event: event

  complaints:[complaint]
  complaint: complaint

  locReports: [locReport]
  locReport: locReport

  classes: [class]
  class: class
}

type Mutation {
  hello: String

  admins: adminMutations
  students: studentMutations
  parents: parentMutations
  drivers: driverMutations
  buses: busMutations
  trips: tripMutations
  routes: routeMutations
  schedules: scheduleMutations
  events: eventMutations
  complaints: complaintMutations
  locReports: locReportMutations
  classes: classMutations
}

# admin things
type admin {
  id: String
  username: String
  email: String
  password: String
}

input Iadmin {
  username: String!
  email: String!
  password: String!
}

input Uadmin {
  id: String!
  username: String
  email: String
  password: String
}

type adminMutations {
  create(admin: Iadmin!): admin
  update(admin: Uadmin!): admin
  archive(admin: Uadmin!): admin
  restore(admin: Uadmin!): admin
}

# driver things
type driver {
  id: String
  username: String
  email: String
  phone: String
  password: String
  bus: bus
}

input Idriver {
  username: String
  email: String
  phone: String
  password: String
  bus: String
}

input Udriver {
  id: String!
  username: String
  email: String
  phone: String
  password: String
  bus: String
}

type driverMutations {
  create(driver: Idriver!): driver
  update(driver: Udriver!): driver
  archive(driver: Udriver!): driver
  restore(driver: Udriver!): driver
}

# bus things
type bus {
  id: String
  make: String
  plate: String
  size: Float
  driver: driver
}

input Ibus {
  make: String
  plate: String
  size: Float
  driver: String
}

input Ubus {
  id: String!
  make: String
  plate: String
  size: Float
  driver: String
}

type busMutations {
  create(bus: Ibus!): bus
  update(bus: Ubus!): bus
  archive(bus: Ubus!): bus
  restore(bus: Ubus!): bus
}

enum eventType {
  CHECKEDOFF
  CHECKEDON
}


# event things
type event {
  id: String
  student: student
  time: String
  type: eventType
  trip:trip
}

input Ievent {
  student: String
  time: String
  type: String
  trip:String
}

input Uevent {
  id: String!
  student: String
  time: String
  type: String
  trip:String
}

type eventMutations {
  create(event: Ievent!): event
  update(event: Uevent!): event
  archive(event: Uevent!): event
  restore(event: Uevent!): event
}

# complaints things
type complaint {
  id: String
  parent: parent
  content: String
  time: String
}

input Icomplaint {
  parent: String
  content: String
  time: String
}

input Ucomplaint {
  id: String!
  parent: String
  content: String
  time: String
}

type complaintMutations {
  create(complaint: Icomplaint!): complaint
  update(complaint: Ucomplaint!): complaint
  archive(complaint: Ucomplaint!): complaint
  restore(complaint: Ucomplaint!): complaint
}

# loc things
type loc {
  id: String
  lat: Float
  lng: Float
}

input Iloc {
  lat: Float
  lng: Float
}

input Uloc {
  id: String!
  lat: Float
  lng: Float
}

type locMutations {
  create(loc: Iloc!): loc
  update(loc: Uloc!): loc
  archive(loc: Uloc!): loc
  restore(loc: Uloc!): loc
}

# locReport things
type locReport {
  id: String
  time: String
  loc: loc
  trip: trip
}

input IlocReport {
  time: String
  loc: Iloc
  trip: String
}

input UlocReport {
  id: String!
  time: String
  loc: Iloc
  trip: String
}

type locReportMutations {
  create(locreport: IlocReport!): locReport
  update(locreport: UlocReport!): locReport
  archive(locreport: UlocReport!): locReport
  restore(locreport: UlocReport!): locReport
}

# trip things
type trip {
  id: String
  startedAt: String
  completedAt: String
  isCancelled: Boolean
  bus:bus,
  driver:driver,
  schedule: schedule
  events:[event]
  locReports: [locReport]
}

input Itrip {
  startedAt: String
  completedAt: String
  isCancelled: Boolean
  schedule: String
}

input Utrip {
  id: String!
  startedAt: String
  completedAt: String
  isCancelled: Boolean
  schedule: String
}

type tripMutations {
  create(trip: Itrip!): trip
  update(trip: Utrip!): trip
  archive(trip: Utrip!): trip
  restore(trip: Utrip!): trip
}

enum gender {
  MALE
  FEMALE
}

# student things
type student {
  id: String
  names: String
  route: route
  gender: gender
  registration: String
  parent: parent
  parent2: parent,
  class: class,
  events:[event]
}

input Istudent {
  names: String
  route: String
  gender: gender
  registration: String
  parent: String
  parent2: String
  class: String
}

input Ustudent {
  id: String!
  names: String
  route: String
  registration: String
  gender: gender
  parent: String
  parent2: String
  class: String
}

type studentMutations {
  create(student: Istudent!): student
  update(student: Ustudent!): student
  archive(student: Ustudent!): student
  restore(student: Ustudent!): student
}

# route things
type route {
  id: String
  name: String
  description: String
  path: [loc]
  schedule:schedule,
  students: [student]
}

input Iroute {
  name: String
  description: String
  path: [Iloc]
}

input Uroute {
  id: String!
  name: String
  description: String
  path: [Iloc]
}

type routeMutations {
  create(route: Iroute!): route
  update(route: Uroute!): route
  archive(route: Uroute!): route
  restore(route: Uroute!): route
}

# class things
type class {
  id: String
  name: String,
  students: [student]
}

input IClass {
  name: String
}

input UClass {
  id: String!
  name: String
}

type classMutations {
  create(class: IClass!): class
  update(class: UClass!): class
  archive(class: UClass!): class
  restore(class: UClass!): class
}

# schedule things
enum day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type schedule {
  id: String
  name: String
  time: String
  end_time: String
  days: [day]
  route: route
  bus: bus
  trips:[trip]
  driver: driver
}

input Ischedule {
  name: String
  time: String
  end_time: String
  route: String
  days: String
  bus: String
  driver: String
}

input Uschedule {
  id: String!
  name: String
  time: String
  end_time: String
  days: String
  route: String
  bus: String
  driver: String
}

type scheduleMutations {
  create(schedule: Ischedule!): schedule
  update(schedule: Uschedule!): schedule
  archive(schedule: Uschedule!): schedule
  restore(schedule: Uschedule!): schedule
}

# parent things
type parent {
  id: String
  national_id: String
  name: String
  phone: String
  email: String
  gender: gender
  students: [student]
  complaints: [complaint]
}

input Iparent {
  name: String
  national_id: String
  phone: String
  email: String
  password: String
  gender: gender
}

input Uparent {
  id: String!
  national_id: String
  name: String
  phone: String
  password: String
  email: String
  gender: gender
}

type parentMutations {
  create(parent: Iparent!): parent
  update(parent: Uparent!): parent
  archive(parent: Uparent!): parent
  restore(parent: Uparent!): parent
}
