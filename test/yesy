describe("Event", () => {
  it("Can create an event", done => {
    chai
      .request(app)
      .post("/graph")
      .set("content-type", "application/json")
      .send({
        query: `
          mutation ($Ievent: Ievent!) {
            events {
              create(event: $Ievent) {
                id
              }
            }
          }            
        `,
        variables: {
          "Ievent": {
            "name": "event 1",
            time: new Date().toLocaleTimeString(),
            route: sharedInfo.routeId,
            days: "MONDAY,TEUSDAY",
            bus: sharedInfo.busId
          }
        }
      })
      .end((err, res) => {
        res.should.have.status(200);
        expect(res.body).to.not.be.null;
        expect(res.body.errors).to.not.exist;
        expect(res.body.data.events.create.id).to.be.a.string;

        sharedInfo.eventId = res.body.data.events.create.id
        done();
      });
  });

  it("Can update an event", done => {
    chai
      .request(app)
      .post("/graph")
      .set("content-type", "application/json")
      .send({
        query: `
          mutation ($event: Uevent!) {
            events {
              update(event: $event) {
                id
              }
            }
          }            
        `,
        variables: {
          "event": {
            "id": sharedInfo.eventId,
            "name": "Event 1 edited"
          }
        }
      })
      .end((err, res) => {
        res.should.have.status(200);
        expect(res.body).to.not.be.null;
        expect(res.body.errors).to.not.exist;
        expect(res.body.data.events.update.id).to.be.a.string;
        done();
      });
  });

  it("Can nuke an event", done => {
    chai
      .request(app)
      .post("/graph")
      .set("content-type", "application/json")
      .send({
        query: `
          mutation ($Ievent: Uevent!) {
            events {
              archive(event: $Ievent) {
                id
              }
            }
          }                  
        `,
        variables: {
          "Ievent": {
            "id": sharedInfo.eventId
          }
        }
      })
      .end((err, res) => {
        res.should.have.status(200);
        expect(res.body).to.not.be.null;
        expect(res.body.errors).to.not.exist;
        expect(res.body.data.events.archive.id).to.be.a.string;
        done();
      });
  });

  it("Can restore an event", done => {
    chai
      .request(app)
      .post("/graph")
      .set("content-type", "application/json")
      .send({
        query: `
          mutation ($Ievent: Uevent!) {
            events {
              restore(event: $Ievent) {
                id
              }
            }
          }                  
        `,
        variables: {
          "Ievent": {
            "id": sharedInfo.eventId
          }
        }
      })
      .end((err, res) => {
        res.should.have.status(200);
        expect(res.body).to.not.be.null;
        expect(res.body.errors).to.not.exist;
        // expect(res.body.data.events.restore.id).to.be.string;
        done();
      });
  });

  it("Can fetch restored event", done => {
    chai
      .request(app)
      .post("/graph")
      .set("content-type", "application/json")
      .send({
        query: `
        {
          events{
            id
          }
        }        
        `
      })
      .end((err, res) => {
        res.should.have.status(200);
        expect(res.body).to.not.be.null;
        expect(res.body.errors).to.not.exist;
        expect(res.body.data.events[0].id).to.be.a.string;

        done();
      });
  });
})