type Query {
  hello: String
  companies: [company]
  company(company: inputUpdateCompany): company
}

type smsSettings {
  smsPort: String
}

type transactionnSettings {
  withdrawal: Float
  duration: Float
  minimumWithdrawalDuration: Float
}

type systemParams {
  # tracks NAV prices change
  minimumNavChart: Float
  dividendsTax: Float
  exerciseTax: Float
  withholdingResident: Float
  maxJointMembers: Float
  vat: Float
  withholdingNonResident: Float
}

type mailSettings {
  mailer: String
  host: String
  encrypt: String
  from: String
  username: String
  email_port: String
}

type chargeSettings {
  minimumSwitchDuration: Float
  transfer: Float
  printing: Float
  minimumTransferDuration: Float
  membership: Float
  switch: Float
  bounceCheque: Float
}

type schemeCharges {
  certificate: Float
  chequeRequest: Float
  RTGS: String
  certReplacement: Float
  rateProductsAgent: Float
}

type companyConfig {
  mail: mailSettings
  sms: smsSettings
  transaction: transactionnSettings
  charges: chargeSettings
  system: systemParams
}

type company {
  id: String
  name: String
  address: String
  email: String
  town: String
  mobile: Float
  physicalAddress: String
  fax: String
  telephone: Float
  config: companyConfig
  securities: [security]
  security(security: inputEditCompanySecurities): security
}

type Mutation {
  hello: String
  companies: companyMutations
}

input inputCompany {
  name: String
  address: String
  email: String
  town: String
  mobile: Float
  physicalAddress: String
  fax: String
  telephone: Float
}

input inputUpdateCompany {
  id: String!
  name: String
  address: String
  email: String
  town: String
  mobile: Float
  physicalAddress: String
  fax: String
  telephone: Float
}

type companyMutations {
  create(company: inputCompany!): company
  update(company: inputUpdateCompany): company
  archive(company: inputUpdateCompany): company
  restore(company: inputUpdateCompany): company
  configurations: companyConfigMutations
  securities: companySecurities
}

input inputCompanyConfig {
  company: String!
  emailMailer: String
  emailHost: String
  emailEncrypt: String
  emailFrom: String
  emailUsername: String
  emailPort: String
  minimumSwitchDuration: Float
  transfer: Float
  printing: Float
  minimumTransferDuration: Float
  membership: Float
  switch: Float
  bounceCheque: Float
  minimumNavChart: Float
  dividendsTax: Float
  exerciseTax: Float
  withholdingResident: Float
  maxJointMembers: Float
  vat: Float
  withholdingNonResident: Float
  withdrawal: Float
  duration: Float
  minimumWithdrawalDuration: Float
  smsPort: String
}

type companyConfigMutations {
  create(configurations: inputCompanyConfig!): Boolean
  update(configurations: inputCompanyConfig): Boolean
}

enum securityType {
  ADMIN
  RATE
}

type security {
  id: String
  company: String!
  code: String!
  name: String!
  type: securityType!
  abbreviation: String!
  frequency: Float

  adminFee: Float!
  managementFee: Float!

  currency: String
  currencyCode: String

  accountNumber: Float
  disbursementAccount: Float

  Description: String
}

input inputCompanySecurities {
  company: String!
  code: String!
  name: String!
  type: securityType!
  abbreviation: String!
  frequency: Float

  adminFee: Float!
  managementFee: Float!

  currency: String
  currencyCode: String

  accountNumber: Float
  disbursementAccount: Float

  Description: String
}

input inputEditCompanySecurities {
  id: String!
  company: String
  code: String
  name: String
  type: securityType
  abbreviation: String
  frequency: Float

  adminFee: Float
  managementFee: Float

  currency: String
  currencyCode: String

  accountNumber: Float
  disbursementAccount: Float

  Description: String
}

type companySecurities {
  create(security: inputCompanySecurities!): security
  update(security: inputEditCompanySecurities!): security
  delete(security: inputEditCompanySecurities!): security
  restore(security: inputEditCompanySecurities!): security
}
