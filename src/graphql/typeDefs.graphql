type Query {
  hello: String

  companies: [company]
  company(company: inputUpdateCompany): company

  securities: [security]
  security(security: inputEditCompanySecurities): security

  expenses: [securityExpense]
  expense(expense: inputEditSecurityExpense): securityExpense

  agents: [agent]
  agent(agent: inputEditAgents): agent

  members: [member]
  member(member: inputEditMembers): member
}

type smsSettings {
  smsPort: String
}

type transactionnSettings {
  withdrawal: Float
  duration: Float
  minimumWithdrawalDuration: Float
}

type systemParams {
  # tracks NAV prices change
  minimumNavChart: Float
  dividendsTax: Float
  exerciseTax: Float
  withholdingResident: Float
  maxJointMembers: Float
  vat: Float
  withholdingNonResident: Float
}

type mailSettings {
  mailer: String
  host: String
  encrypt: String
  from: String
  username: String
  email_port: String
}

type chargeSettings {
  minimumSwitchDuration: Float
  transfer: Float
  printing: Float
  minimumTransferDuration: Float
  membership: Float
  switch: Float
  bounceCheque: Float
}

type schemeCharges {
  certificate: Float
  chequeRequest: Float
  RTGS: String
  certReplacement: Float
  rateProductsAgent: Float
}

type companyConfig {
  mail: mailSettings
  sms: smsSettings
  transaction: transactionnSettings
  charges: chargeSettings
  system: systemParams
}

type company {
  id: String
  name: String
  address: String
  email: String
  town: String
  mobile: Float
  physicalAddress: String
  fax: String
  telephone: Float
  config: companyConfig
  securities: [security]
  agents: [agent]
  members: [member]
}

type Mutation {
  hello: String
  companies: companyMutations
}

input inputCompany {
  name: String
  address: String
  email: String
  town: String
  mobile: Float
  physicalAddress: String
  fax: String
  telephone: Float
}

input inputUpdateCompany {
  id: String!
  name: String
  address: String
  email: String
  town: String
  mobile: Float
  physicalAddress: String
  fax: String
  telephone: Float
}

type companyMutations {
  create(company: inputCompany!): company
  update(company: inputUpdateCompany): company
  archive(company: inputUpdateCompany): company
  restore(company: inputUpdateCompany): company
  configurations: companyConfigMutations
  securities: companySecurities
  agents: agentMutations
  members: memberMutations
}

input inputCompanyConfig {
  company: String!
  emailMailer: String
  emailHost: String
  emailEncrypt: String
  emailFrom: String
  emailUsername: String
  emailPort: String
  minimumSwitchDuration: Float
  transfer: Float
  printing: Float
  minimumTransferDuration: Float
  membership: Float
  switch: Float
  bounceCheque: Float
  minimumNavChart: Float
  dividendsTax: Float
  exerciseTax: Float
  withholdingResident: Float
  maxJointMembers: Float
  vat: Float
  withholdingNonResident: Float
  withdrawal: Float
  duration: Float
  minimumWithdrawalDuration: Float
  smsPort: String
}

type companyConfigMutations {
  create(configurations: inputCompanyConfig!): Boolean
  update(configurations: inputCompanyConfig): Boolean
}

enum securityType {
  ADMIN
  RATE
}

type security {
  id: String
  company: String!
  code: String!
  name: String!
  type: securityType!
  abbreviation: String!
  frequency: Float

  adminFee: Float!
  managementFee: Float!

  currency: String
  currencyCode: String

  accountNumber: Float
  disbursementAccount: Float

  Description: String

  expenses: [securityExpense]
}

input inputCompanySecurities {
  company: String!
  code: String!
  name: String!
  type: securityType!
  abbreviation: String!
  frequency: Float

  adminFee: Float!
  managementFee: Float!

  currency: String
  currencyCode: String

  accountNumber: Float
  disbursementAccount: Float

  Description: String
}

input inputEditCompanySecurities {
  id: String!
  company: String
  code: String
  name: String
  type: securityType
  abbreviation: String
  frequency: Float

  adminFee: Float
  managementFee: Float

  currency: String
  currencyCode: String

  accountNumber: Float
  disbursementAccount: Float

  Description: String
}

type companySecurities {
  create(security: inputCompanySecurities!): security
  update(security: inputEditCompanySecurities!): security
  delete(security: inputEditCompanySecurities!): security
  restore(security: inputEditCompanySecurities!): security
  expenses: securityExpenses
}

type securityExpense {
  id: String!
  name: String!
  minimumAmount: Float!
  security: security!
  rate: Float!

  controls: Boolean!
  vat: Boolean!
  exercise: Boolean!

  remark: String
}

input inputSecurityExpense {
  name: String!
  minimumAmount: Float!
  security: String!
  rate: Float!

  controls: Boolean!
  vat: Boolean!
  exercise: Boolean!

  remark: String
}

input inputEditSecurityExpense {
  id: String!
  name: String
  minimumAmount: Float
  security: String
  rate: Float

  controls: Boolean
  vat: Boolean
  exercise: Boolean

  remark: String
}

type securityExpenses {
  create(expense: inputSecurityExpense!): securityExpense
  update(expense: inputEditSecurityExpense!): securityExpense
  delete(expense: inputEditSecurityExpense!): securityExpense
  restore(expense: inputEditSecurityExpense!): securityExpense
}

type agent {
  id: String!
  surname: String!
  othername: String!
  dob: String!
  gender: String!
  agentType: String!
  bank: String!
  bankAccountNumber: Float!
  postalAddress: String!
  kraPinNo: Float!
  idPassportNumber: Float!
  mobileNumber: Float!
  email: String!
  agentCategory: String!
  bankBranch: String!
  postalCode: Float!
  physicalAddress: String!
}

input inputAgents {
  surname: String!
  othername: String!
  dob: String!
  gender: String!
  agentType: String!
  bank: String!
  bankAccountNumber: Float!
  postalAddress: String!
  kraPinNo: Float!
  idPassportNumber: Float!
  mobileNumber: Float!
  email: String!
  agentCategory: String!
  bankBranch: String!
  postalCode: Float!
  physicalAddress: String!
}

input inputEditAgents {
  id: String!
  surname: String
  othername: String
  dob: String
  gender: String
  agentType: String
  bank: String
  bankAccountNumber: Float
  postalAddress: String
  kraPinNo: Float
  idPassportNumber: Float
  mobileNumber: Float
  email: String
  agentCategory: String
  bankBranch: String
  postalCode: Float
  physicalAddress: String
}

type agentMutations {
  create(agent: inputAgents!): agent
  update(agent: inputEditAgents!): agent
  delete(agent: inputEditAgents!): agent
  restore(agent: inputEditAgents!): agent
}

type member {
  id: String!
  name: String!
  mobile: Float!
  email: String!
  regDate: String!
  confirmed: Boolean!
}

input inputMembers {
  name: String!
  mobile: Float!
  email: String!
  regDate: String!
  confirmed: Boolean!
}

input inputEditMembers {
  id: String!
  name: String
  mobile: Float
  email: String
  regDate: String
  confirmed: Boolean
}

type memberMutations {
  create(member: inputMembers!): member
  update(member: inputEditMembers!): member
  delete(member: inputEditMembers!): member
  restore(member: inputEditMembers!): member
}
